using UnityEngine;
using System.Collections;

namespace net.bilinkeji.gecaoshoulie.motionstatemachinebehaviours
{
	/// <summary>
	/// ${MotionClassName} motion state machine behaviour.
	/// ${motionDesc}
	/// </summary>
	public class ${MotionClassName}MotionStateMachineBehaviour : StateMachineBehaviour
	{

		// OnStateEnter is called when a transition starts and the state machine starts to evaluate this state
		override public void OnStateEnter (Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			Debug.Log (this + ".OnStateEnter(" + animator + "," + stateInfo + "," + layerIndex);
	
		}

		// OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
		override public void OnStateUpdate (Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			Debug.Log (this + ".OnStateUpdate(" + animator + "," + stateInfo + "," + layerIndex);
	
		}

		// OnStateExit is called when a transition ends and the state machine finishes evaluating this state
		override public void OnStateExit (Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
			Debug.Log (this + ".OnStateExit(" + animator + "," + stateInfo + "," + layerIndex);
	
		}

		// OnStateMove is called right after Animator.OnAnimatorMove(). Code that processes and affects root motion should be implemented here
		//override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {
		//
		//}

		// OnStateIK is called right after Animator.OnAnimatorIK(). Code that sets up animation IK (inverse kinematics) should be implemented here.
		//override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {
		//
		//}
	}
}